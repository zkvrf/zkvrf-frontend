// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OperatorRegistered extends ethereum.Event {
  get params(): OperatorRegistered__Params {
    return new OperatorRegistered__Params(this);
  }
}

export class OperatorRegistered__Params {
  _event: OperatorRegistered;

  constructor(event: OperatorRegistered) {
    this._event = event;
  }

  get operatorPublicKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RandomnessFulfilled extends ethereum.Event {
  get params(): RandomnessFulfilled__Params {
    return new RandomnessFulfilled__Params(this);
  }
}

export class RandomnessFulfilled__Params {
  _event: RandomnessFulfilled;

  constructor(event: RandomnessFulfilled) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operatorPublicKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get requester(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get randomness(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RandomnessRequested extends ethereum.Event {
  get params(): RandomnessRequested__Params {
    return new RandomnessRequested__Params(this);
  }
}

export class RandomnessRequested__Params {
  _event: RandomnessRequested;

  constructor(event: RandomnessRequested) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operatorPublicKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get requester(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get minBlockConfirmations(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get callbackGasLimit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ZKVRF extends ethereum.SmartContract {
  static bind(address: Address): ZKVRF {
    return new ZKVRF("ZKVRF", address);
  }

  P(): BigInt {
    let result = super.call("P", "P():(uint256)", []);

    return result[0].toBigInt();
  }

  try_P(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("P", "P():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blockHashHistorian(): Address {
    let result = super.call(
      "blockHashHistorian",
      "blockHashHistorian():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_blockHashHistorian(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "blockHashHistorian",
      "blockHashHistorian():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOperators(lastOperator: Bytes, maxPageSize: BigInt): Array<Bytes> {
    let result = super.call(
      "getOperators",
      "getOperators(bytes32,uint256):(bytes32[])",
      [
        ethereum.Value.fromFixedBytes(lastOperator),
        ethereum.Value.fromUnsignedBigInt(maxPageSize)
      ]
    );

    return result[0].toBytesArray();
  }

  try_getOperators(
    lastOperator: Bytes,
    maxPageSize: BigInt
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getOperators",
      "getOperators(bytes32,uint256):(bytes32[])",
      [
        ethereum.Value.fromFixedBytes(lastOperator),
        ethereum.Value.fromUnsignedBigInt(maxPageSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getOperatorsCount(): BigInt {
    let result = super.call(
      "getOperatorsCount",
      "getOperatorsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOperatorsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOperatorsCount",
      "getOperatorsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashSeedToField(requester: Address, blockHash: Bytes, nonce: BigInt): Bytes {
    let result = super.call(
      "hashSeedToField",
      "hashSeedToField(address,bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(blockHash),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );

    return result[0].toBytes();
  }

  try_hashSeedToField(
    requester: Address,
    blockHash: Bytes,
    nonce: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashSeedToField",
      "hashSeedToField(address,bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(requester),
        ethereum.Value.fromFixedBytes(blockHash),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isOperator(operatorPublicKey: Bytes): boolean {
    let result = super.call("isOperator", "isOperator(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(operatorPublicKey)
    ]);

    return result[0].toBoolean();
  }

  try_isOperator(operatorPublicKey: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOperator", "isOperator(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(operatorPublicKey)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextRequestId(): BigInt {
    let result = super.call("nextRequestId", "nextRequestId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextRequestId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextRequestId",
      "nextRequestId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  randomness(requestId: BigInt): BigInt {
    let result = super.call("randomness", "randomness(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(requestId)
    ]);

    return result[0].toBigInt();
  }

  try_randomness(requestId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("randomness", "randomness(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(requestId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestNonces(requester: Address): BigInt {
    let result = super.call(
      "requestNonces",
      "requestNonces(address):(uint256)",
      [ethereum.Value.fromAddress(requester)]
    );

    return result[0].toBigInt();
  }

  try_requestNonces(requester: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestNonces",
      "requestNonces(address):(uint256)",
      [ethereum.Value.fromAddress(requester)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestRandomness(
    operatorPublicKey: Bytes,
    minBlockConfirmations: i32,
    callbackGasLimit: BigInt
  ): BigInt {
    let result = super.call(
      "requestRandomness",
      "requestRandomness(bytes32,uint16,uint32):(uint256)",
      [
        ethereum.Value.fromFixedBytes(operatorPublicKey),
        ethereum.Value.fromUnsignedBigInt(
          BigInt.fromI32(minBlockConfirmations)
        ),
        ethereum.Value.fromUnsignedBigInt(callbackGasLimit)
      ]
    );

    return result[0].toBigInt();
  }

  try_requestRandomness(
    operatorPublicKey: Bytes,
    minBlockConfirmations: i32,
    callbackGasLimit: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestRandomness",
      "requestRandomness(bytes32,uint16,uint32):(uint256)",
      [
        ethereum.Value.fromFixedBytes(operatorPublicKey),
        ethereum.Value.fromUnsignedBigInt(
          BigInt.fromI32(minBlockConfirmations)
        ),
        ethereum.Value.fromUnsignedBigInt(callbackGasLimit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requests(requestId: BigInt): Bytes {
    let result = super.call("requests", "requests(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(requestId)
    ]);

    return result[0].toBytes();
  }

  try_requests(requestId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("requests", "requests(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(requestId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  verifier(): Address {
    let result = super.call("verifier", "verifier():(address)", []);

    return result[0].toAddress();
  }

  try_verifier(): ethereum.CallResult<Address> {
    let result = super.tryCall("verifier", "verifier():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get verifier_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get blockHashHistorian_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FulfillRandomnessCall extends ethereum.Call {
  get inputs(): FulfillRandomnessCall__Inputs {
    return new FulfillRandomnessCall__Inputs(this);
  }

  get outputs(): FulfillRandomnessCall__Outputs {
    return new FulfillRandomnessCall__Outputs(this);
  }
}

export class FulfillRandomnessCall__Inputs {
  _call: FulfillRandomnessCall;

  constructor(call: FulfillRandomnessCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get request(): FulfillRandomnessCallRequestStruct {
    return changetype<FulfillRandomnessCallRequestStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get signature(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get snarkProof(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FulfillRandomnessCall__Outputs {
  _call: FulfillRandomnessCall;

  constructor(call: FulfillRandomnessCall) {
    this._call = call;
  }
}

export class FulfillRandomnessCallRequestStruct extends ethereum.Tuple {
  get operatorPublicKey(): Bytes {
    return this[0].toBytes();
  }

  get blockNumber(): BigInt {
    return this[1].toBigInt();
  }

  get minBlockConfirmations(): i32 {
    return this[2].toI32();
  }

  get callbackGasLimit(): BigInt {
    return this[3].toBigInt();
  }

  get requester(): Address {
    return this[4].toAddress();
  }

  get nonce(): BigInt {
    return this[5].toBigInt();
  }
}

export class RegisterOperatorCall extends ethereum.Call {
  get inputs(): RegisterOperatorCall__Inputs {
    return new RegisterOperatorCall__Inputs(this);
  }

  get outputs(): RegisterOperatorCall__Outputs {
    return new RegisterOperatorCall__Outputs(this);
  }
}

export class RegisterOperatorCall__Inputs {
  _call: RegisterOperatorCall;

  constructor(call: RegisterOperatorCall) {
    this._call = call;
  }

  get publicKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RegisterOperatorCall__Outputs {
  _call: RegisterOperatorCall;

  constructor(call: RegisterOperatorCall) {
    this._call = call;
  }
}

export class RequestRandomnessCall extends ethereum.Call {
  get inputs(): RequestRandomnessCall__Inputs {
    return new RequestRandomnessCall__Inputs(this);
  }

  get outputs(): RequestRandomnessCall__Outputs {
    return new RequestRandomnessCall__Outputs(this);
  }
}

export class RequestRandomnessCall__Inputs {
  _call: RequestRandomnessCall;

  constructor(call: RequestRandomnessCall) {
    this._call = call;
  }

  get operatorPublicKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get minBlockConfirmations(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get callbackGasLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RequestRandomnessCall__Outputs {
  _call: RequestRandomnessCall;

  constructor(call: RequestRandomnessCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
