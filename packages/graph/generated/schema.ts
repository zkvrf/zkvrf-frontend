// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
import {
  BigDecimal,
  BigInt,
  Bytes,
  Entity,
  TypedMap,
  Value,
  ValueKind,
  store,
} from '@graphprotocol/graph-ts';

export class ProvingKeyDeregistered extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(
      id != null,
      'Cannot save ProvingKeyDeregistered entity without an ID'
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProvingKeyDeregistered must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('ProvingKeyDeregistered', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ProvingKeyDeregistered | null {
    return changetype<ProvingKeyDeregistered | null>(
      store.get_in_block('ProvingKeyDeregistered', id.toHexString())
    );
  }

  static load(id: Bytes): ProvingKeyDeregistered | null {
    return changetype<ProvingKeyDeregistered | null>(
      store.get('ProvingKeyDeregistered', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get keyHash(): Bytes {
    let value = this.get('keyHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set keyHash(value: Bytes) {
    this.set('keyHash', Value.fromBytes(value));
  }

  get oracle(): Bytes {
    let value = this.get('oracle');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set oracle(value: Bytes) {
    this.set('oracle', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class ProvingKeyRegistered extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save ProvingKeyRegistered entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProvingKeyRegistered must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('ProvingKeyRegistered', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ProvingKeyRegistered | null {
    return changetype<ProvingKeyRegistered | null>(
      store.get_in_block('ProvingKeyRegistered', id.toHexString())
    );
  }

  static load(id: Bytes): ProvingKeyRegistered | null {
    return changetype<ProvingKeyRegistered | null>(
      store.get('ProvingKeyRegistered', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get keyHash(): Bytes {
    let value = this.get('keyHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set keyHash(value: Bytes) {
    this.set('keyHash', Value.fromBytes(value));
  }

  get oracle(): Bytes {
    let value = this.get('oracle');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set oracle(value: Bytes) {
    this.set('oracle', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class RandomWordsFulfilled extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RandomWordsFulfilled entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RandomWordsFulfilled must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RandomWordsFulfilled', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RandomWordsFulfilled | null {
    return changetype<RandomWordsFulfilled | null>(
      store.get_in_block('RandomWordsFulfilled', id.toHexString())
    );
  }

  static load(id: Bytes): RandomWordsFulfilled | null {
    return changetype<RandomWordsFulfilled | null>(
      store.get('RandomWordsFulfilled', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get requestId(): BigInt {
    let value = this.get('requestId');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt) {
    this.set('requestId', Value.fromBigInt(value));
  }

  get outputSeed(): BigInt {
    let value = this.get('outputSeed');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set outputSeed(value: BigInt) {
    this.set('outputSeed', Value.fromBigInt(value));
  }

  get payment(): BigInt {
    let value = this.get('payment');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set payment(value: BigInt) {
    this.set('payment', Value.fromBigInt(value));
  }

  get success(): boolean {
    let value = this.get('success');
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set success(value: boolean) {
    this.set('success', Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class RandomWordsRequested extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RandomWordsRequested entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RandomWordsRequested must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RandomWordsRequested', id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RandomWordsRequested | null {
    return changetype<RandomWordsRequested | null>(
      store.get_in_block('RandomWordsRequested', id.toHexString())
    );
  }

  static load(id: Bytes): RandomWordsRequested | null {
    return changetype<RandomWordsRequested | null>(
      store.get('RandomWordsRequested', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get keyHash(): Bytes {
    let value = this.get('keyHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set keyHash(value: Bytes) {
    this.set('keyHash', Value.fromBytes(value));
  }

  get requestId(): BigInt {
    let value = this.get('requestId');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt) {
    this.set('requestId', Value.fromBigInt(value));
  }

  get preSeed(): BigInt {
    let value = this.get('preSeed');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set preSeed(value: BigInt) {
    this.set('preSeed', Value.fromBigInt(value));
  }

  get subId(): BigInt {
    let value = this.get('subId');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set subId(value: BigInt) {
    this.set('subId', Value.fromBigInt(value));
  }

  get minimumRequestConfirmations(): i32 {
    let value = this.get('minimumRequestConfirmations');
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set minimumRequestConfirmations(value: i32) {
    this.set('minimumRequestConfirmations', Value.fromI32(value));
  }

  get callbackGasLimit(): BigInt {
    let value = this.get('callbackGasLimit');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set callbackGasLimit(value: BigInt) {
    this.set('callbackGasLimit', Value.fromBigInt(value));
  }

  get numWords(): BigInt {
    let value = this.get('numWords');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set numWords(value: BigInt) {
    this.set('numWords', Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get('sender');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set('sender', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}
