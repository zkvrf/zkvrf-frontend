type ConfigSet @entity(immutable: true) {
  id: Bytes!
  minimumRequestConfirmations: Int! # uint16
  maxGasLimit: BigInt! # uint32
  stalenessSeconds: BigInt! # uint32
  gasAfterPaymentCalculation: BigInt! # uint32
  fallbackWeiPerUnitLink: BigInt! # int256
  feeConfig_fulfillmentFlatFeeLinkPPMTier1: BigInt! # uint32
  feeConfig_fulfillmentFlatFeeLinkPPMTier2: BigInt! # uint32
  feeConfig_fulfillmentFlatFeeLinkPPMTier3: BigInt! # uint32
  feeConfig_fulfillmentFlatFeeLinkPPMTier4: BigInt! # uint32
  feeConfig_fulfillmentFlatFeeLinkPPMTier5: BigInt! # uint32
  feeConfig_reqsForTier2: Int! # uint24
  feeConfig_reqsForTier3: Int! # uint24
  feeConfig_reqsForTier4: Int! # uint24
  feeConfig_reqsForTier5: Int! # uint24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FundsRecovered @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferRequested @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProvingKeyDeregistered @entity(immutable: true) {
  id: Bytes!
  keyHash: Bytes! # bytes32
  oracle: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProvingKeyRegistered @entity(immutable: true) {
  id: Bytes!
  keyHash: Bytes! # bytes32
  oracle: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RandomWordsFulfilled @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  outputSeed: BigInt! # uint256
  payment: BigInt! # uint96
  success: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RandomWordsRequested @entity(immutable: true) {
  id: Bytes!
  keyHash: Bytes! # bytes32
  requestId: BigInt! # uint256
  preSeed: BigInt! # uint256
  subId: BigInt! # uint64
  minimumRequestConfirmations: Int! # uint16
  callbackGasLimit: BigInt! # uint32
  numWords: BigInt! # uint32
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubscriptionCanceled @entity(immutable: true) {
  id: Bytes!
  subId: BigInt! # uint64
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubscriptionConsumerAdded @entity(immutable: true) {
  id: Bytes!
  subId: BigInt! # uint64
  consumer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubscriptionConsumerRemoved @entity(immutable: true) {
  id: Bytes!
  subId: BigInt! # uint64
  consumer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubscriptionCreated @entity(immutable: true) {
  id: Bytes!
  subId: BigInt! # uint64
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubscriptionFunded @entity(immutable: true) {
  id: Bytes!
  subId: BigInt! # uint64
  oldBalance: BigInt! # uint256
  newBalance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubscriptionOwnerTransferRequested @entity(immutable: true) {
  id: Bytes!
  subId: BigInt! # uint64
  from: Bytes! # address
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubscriptionOwnerTransferred @entity(immutable: true) {
  id: Bytes!
  subId: BigInt! # uint64
  from: Bytes! # address
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
